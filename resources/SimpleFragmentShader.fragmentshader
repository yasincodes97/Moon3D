#version 450 core

// Output data
out vec3 color;

//Input data
in vec3 fNormal;
in vec3 fPosition;
in vec3 fLight;

//texture stuff
in vec2 UV;
uniform sampler2D myTextureSampler;

void main()
{
  vec3 materialColor = texture(myTextureSampler, UV).rgb;
  float ka = 0.0;
  float ks = 0.8;
  float kd = 0.8;
  float shininess = 1000.0;

  // light source and vertex
  vec3 lightDirection = normalize(fLight);
  vec3 v = normalize(fPosition);
  vec3 N = normalize(fNormal);

   // vectors for light model
      vec3 L = normalize(fLight - fPosition); // Update light direction
      vec3 E = normalize(vec3(0, 0, 0) - fPosition); // we are in Eye Coordinates, so EyePos is (0,0,0)
      vec3 R = normalize(-reflect(L, N));


  // ambient
  float ambient = ka;

  // specular
  float specular = ks * pow(max(dot(R, E), 0.0), shininess);
  specular = clamp(specular, 0.0, 1.0);

  // diffuse
  float diffuse = kd * max(dot(N, L), 0.0);
  diffuse = clamp(diffuse, 0.0, 1.0);

  // Compute Total Intensity:
  float intensity = ambient + diffuse + specular;

  color = intensity * materialColor;
}