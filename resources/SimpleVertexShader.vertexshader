#version 450 core

// Input vertex data
layout(location = 0) in vec3 vertexPosition_modelSpace;
layout(location = 1) in vec3 vertexNormal_modelSpace;
layout(location = 2) in vec2 vertexUV;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV;
uniform vec3 lightPosition; // Added light position uniform
uniform sampler2D myTextureSampler;

// Output variables
out vec3 fNormal;
out vec3 fPosition;
out vec3 fLight;
out vec2 UV;

void main(){
    // Transform position and normal to camera space fragment shader for lighting
    vec4 positionHom = MV * vec4(vertexPosition_modelSpace, 1.0);
    fPosition = positionHom.xyz;
    mat4 normalMatrix = transpose(inverse(MV));
    vec4 normalHom = normalMatrix * vec4(vertexNormal_modelSpace, 1.0);
    fNormal = normalHom.xyz;

    vec4 lightHom = normalMatrix * vec4(4.0, 4.0, 4.0, 4.0);
    fLight = lightHom.xyz;


    // Output position of the vertex, in clip space: MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelSpace, 1);

    UV = vertexUV;
}
